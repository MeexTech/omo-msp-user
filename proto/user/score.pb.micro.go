// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/score.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ScoreService service

type ScoreService interface {
	AddOne(ctx context.Context, in *ReqScoreAdd, opts ...client.CallOption) (*ReplyScoreInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyScoreInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, opts ...client.CallOption) (*ReplyInfo, error)
	GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyScoreList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
}

type scoreService struct {
	c    client.Client
	name string
}

func NewScoreService(name string, c client.Client) ScoreService {
	return &scoreService{
		c:    c,
		name: name,
	}
}

func (c *scoreService) AddOne(ctx context.Context, in *ReqScoreAdd, opts ...client.CallOption) (*ReplyScoreInfo, error) {
	req := c.c.NewRequest(c.name, "ScoreService.AddOne", in)
	out := new(ReplyScoreInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyScoreInfo, error) {
	req := c.c.NewRequest(c.name, "ScoreService.GetOne", in)
	out := new(ReplyScoreInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ScoreService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreService) UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ScoreService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreService) GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyScoreList, error) {
	req := c.c.NewRequest(c.name, "ScoreService.GetByFilter", in)
	out := new(ReplyScoreList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "ScoreService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ScoreService service

type ScoreServiceHandler interface {
	AddOne(context.Context, *ReqScoreAdd, *ReplyScoreInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyScoreInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	UpdateByFilter(context.Context, *ReqUpdateFilter, *ReplyInfo) error
	GetByFilter(context.Context, *RequestFilter, *ReplyScoreList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
}

func RegisterScoreServiceHandler(s server.Server, hdlr ScoreServiceHandler, opts ...server.HandlerOption) error {
	type scoreService interface {
		AddOne(ctx context.Context, in *ReqScoreAdd, out *ReplyScoreInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyScoreInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, out *ReplyInfo) error
		GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyScoreList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
	}
	type ScoreService struct {
		scoreService
	}
	h := &scoreServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ScoreService{h}, opts...))
}

type scoreServiceHandler struct {
	ScoreServiceHandler
}

func (h *scoreServiceHandler) AddOne(ctx context.Context, in *ReqScoreAdd, out *ReplyScoreInfo) error {
	return h.ScoreServiceHandler.AddOne(ctx, in, out)
}

func (h *scoreServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyScoreInfo) error {
	return h.ScoreServiceHandler.GetOne(ctx, in, out)
}

func (h *scoreServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.ScoreServiceHandler.RemoveOne(ctx, in, out)
}

func (h *scoreServiceHandler) UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, out *ReplyInfo) error {
	return h.ScoreServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *scoreServiceHandler) GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyScoreList) error {
	return h.ScoreServiceHandler.GetByFilter(ctx, in, out)
}

func (h *scoreServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.ScoreServiceHandler.GetStatistic(ctx, in, out)
}
