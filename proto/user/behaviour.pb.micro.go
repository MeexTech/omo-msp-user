// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/behaviour.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BehaviourService service

type BehaviourService interface {
	AddOne(ctx context.Context, in *ReqBehaviourAdd, opts ...client.CallOption) (*ReplyInfo, error)
	HadOne(ctx context.Context, in *ReqBehaviourCheck, opts ...client.CallOption) (*ReplyBehaviourCheck, error)
	UpdateOne(ctx context.Context, in *ReqBehaviourUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	GetCount(ctx context.Context, in *ReqBehaviourCheck, opts ...client.CallOption) (*ReplyBehaviourCheck, error)
	GetList(ctx context.Context, in *ReqBehaviourList, opts ...client.CallOption) (*ReplyBehaviourList, error)
	GetStatistic(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyStatistic, error)
}

type behaviourService struct {
	c    client.Client
	name string
}

func NewBehaviourService(name string, c client.Client) BehaviourService {
	return &behaviourService{
		c:    c,
		name: name,
	}
}

func (c *behaviourService) AddOne(ctx context.Context, in *ReqBehaviourAdd, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "BehaviourService.AddOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourService) HadOne(ctx context.Context, in *ReqBehaviourCheck, opts ...client.CallOption) (*ReplyBehaviourCheck, error) {
	req := c.c.NewRequest(c.name, "BehaviourService.HadOne", in)
	out := new(ReplyBehaviourCheck)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourService) UpdateOne(ctx context.Context, in *ReqBehaviourUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "BehaviourService.UpdateOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourService) GetCount(ctx context.Context, in *ReqBehaviourCheck, opts ...client.CallOption) (*ReplyBehaviourCheck, error) {
	req := c.c.NewRequest(c.name, "BehaviourService.GetCount", in)
	out := new(ReplyBehaviourCheck)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourService) GetList(ctx context.Context, in *ReqBehaviourList, opts ...client.CallOption) (*ReplyBehaviourList, error) {
	req := c.c.NewRequest(c.name, "BehaviourService.GetList", in)
	out := new(ReplyBehaviourList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourService) GetStatistic(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "BehaviourService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BehaviourService service

type BehaviourServiceHandler interface {
	AddOne(context.Context, *ReqBehaviourAdd, *ReplyInfo) error
	HadOne(context.Context, *ReqBehaviourCheck, *ReplyBehaviourCheck) error
	UpdateOne(context.Context, *ReqBehaviourUpdate, *ReplyInfo) error
	GetCount(context.Context, *ReqBehaviourCheck, *ReplyBehaviourCheck) error
	GetList(context.Context, *ReqBehaviourList, *ReplyBehaviourList) error
	GetStatistic(context.Context, *RequestPage, *ReplyStatistic) error
}

func RegisterBehaviourServiceHandler(s server.Server, hdlr BehaviourServiceHandler, opts ...server.HandlerOption) error {
	type behaviourService interface {
		AddOne(ctx context.Context, in *ReqBehaviourAdd, out *ReplyInfo) error
		HadOne(ctx context.Context, in *ReqBehaviourCheck, out *ReplyBehaviourCheck) error
		UpdateOne(ctx context.Context, in *ReqBehaviourUpdate, out *ReplyInfo) error
		GetCount(ctx context.Context, in *ReqBehaviourCheck, out *ReplyBehaviourCheck) error
		GetList(ctx context.Context, in *ReqBehaviourList, out *ReplyBehaviourList) error
		GetStatistic(ctx context.Context, in *RequestPage, out *ReplyStatistic) error
	}
	type BehaviourService struct {
		behaviourService
	}
	h := &behaviourServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BehaviourService{h}, opts...))
}

type behaviourServiceHandler struct {
	BehaviourServiceHandler
}

func (h *behaviourServiceHandler) AddOne(ctx context.Context, in *ReqBehaviourAdd, out *ReplyInfo) error {
	return h.BehaviourServiceHandler.AddOne(ctx, in, out)
}

func (h *behaviourServiceHandler) HadOne(ctx context.Context, in *ReqBehaviourCheck, out *ReplyBehaviourCheck) error {
	return h.BehaviourServiceHandler.HadOne(ctx, in, out)
}

func (h *behaviourServiceHandler) UpdateOne(ctx context.Context, in *ReqBehaviourUpdate, out *ReplyInfo) error {
	return h.BehaviourServiceHandler.UpdateOne(ctx, in, out)
}

func (h *behaviourServiceHandler) GetCount(ctx context.Context, in *ReqBehaviourCheck, out *ReplyBehaviourCheck) error {
	return h.BehaviourServiceHandler.GetCount(ctx, in, out)
}

func (h *behaviourServiceHandler) GetList(ctx context.Context, in *ReqBehaviourList, out *ReplyBehaviourList) error {
	return h.BehaviourServiceHandler.GetList(ctx, in, out)
}

func (h *behaviourServiceHandler) GetStatistic(ctx context.Context, in *RequestPage, out *ReplyStatistic) error {
	return h.BehaviourServiceHandler.GetStatistic(ctx, in, out)
}
