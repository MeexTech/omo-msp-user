// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/account.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AccountService service

type AccountService interface {
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyAccount, error)
	SignIn(ctx context.Context, in *ReqSignIn, opts ...client.CallOption) (*ReplyInfo, error)
	SetPasswords(ctx context.Context, in *ReqSetPasswords, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateName(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateStatus(ctx context.Context, in *ReqAccountStatus, opts ...client.CallOption) (*ReplyInfo, error)
	GetStatistic(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyStatistic, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyAccount, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetOne", in)
	out := new(ReplyAccount)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) SignIn(ctx context.Context, in *ReqSignIn, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "AccountService.SignIn", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) SetPasswords(ctx context.Context, in *ReqSetPasswords, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "AccountService.SetPasswords", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateName(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "AccountService.UpdateName", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateStatus(ctx context.Context, in *ReqAccountStatus, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "AccountService.UpdateStatus", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetStatistic(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountService service

type AccountServiceHandler interface {
	GetOne(context.Context, *RequestInfo, *ReplyAccount) error
	SignIn(context.Context, *ReqSignIn, *ReplyInfo) error
	SetPasswords(context.Context, *ReqSetPasswords, *ReplyInfo) error
	UpdateName(context.Context, *RequestInfo, *ReplyInfo) error
	UpdateStatus(context.Context, *ReqAccountStatus, *ReplyInfo) error
	GetStatistic(context.Context, *RequestPage, *ReplyStatistic) error
}

func RegisterAccountServiceHandler(s server.Server, hdlr AccountServiceHandler, opts ...server.HandlerOption) error {
	type accountService interface {
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyAccount) error
		SignIn(ctx context.Context, in *ReqSignIn, out *ReplyInfo) error
		SetPasswords(ctx context.Context, in *ReqSetPasswords, out *ReplyInfo) error
		UpdateName(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		UpdateStatus(ctx context.Context, in *ReqAccountStatus, out *ReplyInfo) error
		GetStatistic(ctx context.Context, in *RequestPage, out *ReplyStatistic) error
	}
	type AccountService struct {
		accountService
	}
	h := &accountServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AccountService{h}, opts...))
}

type accountServiceHandler struct {
	AccountServiceHandler
}

func (h *accountServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyAccount) error {
	return h.AccountServiceHandler.GetOne(ctx, in, out)
}

func (h *accountServiceHandler) SignIn(ctx context.Context, in *ReqSignIn, out *ReplyInfo) error {
	return h.AccountServiceHandler.SignIn(ctx, in, out)
}

func (h *accountServiceHandler) SetPasswords(ctx context.Context, in *ReqSetPasswords, out *ReplyInfo) error {
	return h.AccountServiceHandler.SetPasswords(ctx, in, out)
}

func (h *accountServiceHandler) UpdateName(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.AccountServiceHandler.UpdateName(ctx, in, out)
}

func (h *accountServiceHandler) UpdateStatus(ctx context.Context, in *ReqAccountStatus, out *ReplyInfo) error {
	return h.AccountServiceHandler.UpdateStatus(ctx, in, out)
}

func (h *accountServiceHandler) GetStatistic(ctx context.Context, in *RequestPage, out *ReplyStatistic) error {
	return h.AccountServiceHandler.GetStatistic(ctx, in, out)
}
