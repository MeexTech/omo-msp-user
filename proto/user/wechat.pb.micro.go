// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/wechat.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for WechatService service

type WechatService interface {
	AddOne(ctx context.Context, in *ReqWechatAdd, opts ...client.CallOption) (*ReplyWechatInfo, error)
	GetOne(ctx context.Context, in *ReqWechatBy, opts ...client.CallOption) (*ReplyWechatInfo, error)
	UpdateBase(ctx context.Context, in *ReqWechatUpdate, opts ...client.CallOption) (*ReplyWechatInfo, error)
}

type wechatService struct {
	c    client.Client
	name string
}

func NewWechatService(name string, c client.Client) WechatService {
	return &wechatService{
		c:    c,
		name: name,
	}
}

func (c *wechatService) AddOne(ctx context.Context, in *ReqWechatAdd, opts ...client.CallOption) (*ReplyWechatInfo, error) {
	req := c.c.NewRequest(c.name, "WechatService.AddOne", in)
	out := new(ReplyWechatInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatService) GetOne(ctx context.Context, in *ReqWechatBy, opts ...client.CallOption) (*ReplyWechatInfo, error) {
	req := c.c.NewRequest(c.name, "WechatService.GetOne", in)
	out := new(ReplyWechatInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatService) UpdateBase(ctx context.Context, in *ReqWechatUpdate, opts ...client.CallOption) (*ReplyWechatInfo, error) {
	req := c.c.NewRequest(c.name, "WechatService.UpdateBase", in)
	out := new(ReplyWechatInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WechatService service

type WechatServiceHandler interface {
	AddOne(context.Context, *ReqWechatAdd, *ReplyWechatInfo) error
	GetOne(context.Context, *ReqWechatBy, *ReplyWechatInfo) error
	UpdateBase(context.Context, *ReqWechatUpdate, *ReplyWechatInfo) error
}

func RegisterWechatServiceHandler(s server.Server, hdlr WechatServiceHandler, opts ...server.HandlerOption) error {
	type wechatService interface {
		AddOne(ctx context.Context, in *ReqWechatAdd, out *ReplyWechatInfo) error
		GetOne(ctx context.Context, in *ReqWechatBy, out *ReplyWechatInfo) error
		UpdateBase(ctx context.Context, in *ReqWechatUpdate, out *ReplyWechatInfo) error
	}
	type WechatService struct {
		wechatService
	}
	h := &wechatServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WechatService{h}, opts...))
}

type wechatServiceHandler struct {
	WechatServiceHandler
}

func (h *wechatServiceHandler) AddOne(ctx context.Context, in *ReqWechatAdd, out *ReplyWechatInfo) error {
	return h.WechatServiceHandler.AddOne(ctx, in, out)
}

func (h *wechatServiceHandler) GetOne(ctx context.Context, in *ReqWechatBy, out *ReplyWechatInfo) error {
	return h.WechatServiceHandler.GetOne(ctx, in, out)
}

func (h *wechatServiceHandler) UpdateBase(ctx context.Context, in *ReqWechatUpdate, out *ReplyWechatInfo) error {
	return h.WechatServiceHandler.UpdateBase(ctx, in, out)
}
